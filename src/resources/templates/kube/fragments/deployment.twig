{% import "kube/macros.twig" as macros %}

{% set volumeList = [] %}

---

{% if dialect == "openshift" %}
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
{% else %}
apiVersion: apps/v1
kind: Deployment
{% endif %}
metadata:
  name: {{ serviceName }}
spec:
  selector:
{% if dialect == "openshift" %}
    run: {{ serviceName }}

    {%~ if writeImageStreams %}
  strategy:
    type: Recreate
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: {{ imagestreamsAutomatic|default('false')|ensureBoolean }}
        containerNames:
        {%~ for service in service.containers %}
          - {{ service.name }}
            {%~ set lastServiceName = service.name %}
            {%~ set lastServiceImage = service.image %}
        {%~ endfor %}
        from:
          kind: ImageStreamTag
          name: {{ serviceName }}:{{ macros.getLabelFromImageUrl(service.image) }}
    - type: ConfigChange
    {% endif %}

{% else %}
    matchLabels:
      run: {{ serviceName }}
{% endif %}
  replicas: {{ service.replicas|default('1') }}
{% if deploymentConfigHistoryLimit %}
  revisionHistoryLimit: {{ deploymentConfigHistoryLimit }}
{% endif %}
  template:
    metadata:
      labels:
        run: {{ serviceName }}
    spec:
      containers:

{% for service in service.containers %}

        - name: {{ service.name }}
          image: {{ service.image }}
          imagePullPolicy: Always
{% if service.entrypoint %}
          command: {{ macros.command(service.entrypoint) }}
{% endif %}
{% if service.command %}
          args: {{ macros.command(service.command) }}
{% endif %}

{% if service.environment %}
{{ macros.envList(service.environment, _secretEnvs, 10) }}
{% endif %}

{# do we have service or container ports? #}
{% set declaredPorts = [] %}
{% if service._servicePorts %}
{% set declaredPorts = declaredPorts|merge(service._servicePorts) %}
{% endif %}
{% if service._containerPorts %}
{% set declaredPorts = declaredPorts|merge(service._containerPorts) %}
{% endif %}

{% if not declaredPorts is empty %}
          ports:
{% for port in declaredPorts %}
{% if port is iterable %}
            - containerPort: {{ port.containerPort }}
{% else %}
            - containerPort: {{ port }}
{% endif %}
{% endfor %}
{% endif %}

{% if service._volumes %}
          volumeMounts:
{% for volume in service._volumes %}
            - name: {{ service.name }}{{ macros.volumePathToName(volume) }}
              mountPath: {{ macros.getPathFromVolume(volume) }}

    {# add to volume list #}
    {% set volumeList = volumeList|merge([{'serviceName': service.name, 'path': volume}]) %}
{% endfor %}

{% endif %}

{% endfor %}

{# end container loop #}

{% if not volumeList is empty %}
      volumes:
{% for volume in volumeList %}
        - name: {{ volume.serviceName }}{{ macros.volumePathToName(volume.path) }}
          persistentVolumeClaim:
            claimName: {{ volume.serviceName }}{{ macros.volumePathToName(volume.path) }}-claim
{% endfor %}
{% endif %}
