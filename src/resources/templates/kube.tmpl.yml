{# any hint which kube platform we are on? #}
{% if not dialect %}
{% set dialect="k8s" %}
{% endif %}

{% for serviceName, service in services %}

{# secret env list? #}
{% if service._secretEnvs is defined %}
{% set _secretEnvs=service._secretEnvs %}
{% else %}
{% set _secretEnvs=[] %}
{% endif %}

{% if not service._type %}
{% set type="deployment" %}
{% else %}
{% set type=service._type %}
{% endif %}

{% if type == "deployment" %}
---

{% if dialect == "openshift" %}
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
{% else %}
apiVersion: apps/v1
kind: Deployment
{% endif %}
metadata:
  name: {{ serviceName }}
spec:
  selector:
{% if dialect == "openshift" %}
    run: {{ serviceName }}
{% else %}
    matchLabels:
      run: {{ serviceName }}
{% endif %}
  replicas: 1
  template:
    metadata:
      labels:
        run: {{ serviceName }}
    spec:
      containers:
        - name: {{ serviceName }}
          image: {{ service.image }}
          imagePullPolicy: Always
{% if service.entrypoint %}
          command: {{ _self.command(service.entrypoint) }}
{% endif %}
{% if service.command %}
          args: {{ _self.command(service.command) }}
{% endif %}

{% if service.environment %}
{{ _self.envList(service.environment, _secretEnvs, 10) }}
{% endif %}

{% if service._servicePorts %}
          ports:
{% for port in service._servicePorts %}
            - containerPort: {{ port }}
{% endfor %}
{% endif %}

{% if service._volumes %}
          volumeMounts:
{% for volume in service._volumes %}
            - name: {{ serviceName }}{{ _self.volumePathToName(volume) }}
              mountPath: {{ volume }}
{% endfor %}
{% endif %}

{% if service._volumes %}
      volumes:
{% for volume in service._volumes %}
        - name: {{ serviceName }}{{ _self.volumePathToName(volume) }}
          persistentVolumeClaim:
            claimName: {{ serviceName }}{{ _self.volumePathToName(volume) }}-claim
{% endfor %}
{% endif %}

{# endif if type deployment #}
{% endif %}

{% if type == "job" %}
---

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ serviceName }}
spec:
{% if service._backOffLimit %}
  backoffLimit: {{ service._backOffLimit }}
{% endif %}
  template:
    spec:
      containers:
      - name: {{ serviceName }}
        image: {{ service.image }}
        imagePullPolicy: Always
{% if service.entrypoint %}
        command: {{ _self.command(service.entrypoint) }}
{% endif %}
{% if service.command %}
        {% if service._commandIsArgs %}args{% else %}command{% endif %}: {{ _self.command(service.command) }}
{% endif %}

{% if service.environment %}
{{ _self.envList(service.environment, _secretEnvs, 8) }}
{% endif %}

      restartPolicy: Never

{# endif if type job #}
{% endif %}

{% if service._servicePorts %}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ serviceName }}
  labels:
    run: {{ serviceName }}-svc
spec:
  selector:
    run: {{ serviceName }}
  ports:
{% for port in service._servicePorts %}
    - port: {{ port }}
      targetPort: {{ port }}
      protocol: TCP
      name: {{ serviceName }}{{ port }}
{% endfor %}
{% endif %}


{% if service._volumes %}
{% for volume in service._volumes %}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ serviceName }}{{ _self.volumePathToName(volume) }}-claim
spec:
  resources:
    requests:
      storage: 5Gi
  accessModes:
    - ReadWriteOnce
{% endfor %}
{% endif %}


{% if service._exposes %}

{% for expose in service._exposes %}
---
{% if dialect == "openshift" %}
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: {{ serviceName }}{{ expose.port }}
spec:
  host: '{{ expose.name }}${DOMAIN}'
  port:
    targetPort: {{ serviceName }}{{ expose.port }}
  tls:
    termination: edge
  to:
    kind: Service
    name: {{ serviceName }}
    weight: 100
  wildcardPolicy: None
status:
  ingress:
    - conditions:
        - status: 'True'
          type: Admitted
      routerName: router
      wildcardPolicy: None
{% else %}
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: {{ serviceName }}{{ expose.port }}
#  annotations:
#    kubernetes.io/ingress.class: traefik
#{% if expose.basicAuth %}
#    ingress.kubernetes.io/auth-type: "basic"
#    ingress.kubernetes.io/auth-secret: "basic-auth"
#{% endif %}
#
#spec:
#  rules:
#  - host: '{{ expose.name }}${DOMAIN}'
#    http:
#      paths:
#      - path: /
#        backend:
#          serviceName: {{ serviceName }}
#          servicePort: {{ serviceName }}{{ expose.port }}
#  tls:
#    - secretName: tls-cert
{% endif %}
{% endfor %}

{% endif %}

{% endfor %}

{% macro volumePathToName(name) %}{{ name|replace({'/': '-'}) }}{% endmacro %}

{% macro envList(envList, _secretEnvs, indent = 8) %}
{{ strRepeat(" ", indent) }}env:
{% for envName, envValue in envList %}

{# if env value is only a placeholder, write valueFrom as key! #}
{% if (envValue|trim starts with '${' and envValue|trim ends with '}') %}{% set valueKeyName = "valueFrom" %}{% else %}{% set valueKeyName = "value" %}{% endif %}

{# is this a secret env? prefix its value! #}
{% if envName in _secretEnvs %}
{% set valuePrefix = "[SECRET]" %}
{% else %}
{% set valuePrefix = "" %}
{% endif %}

{{ strRepeat(" ", indent + 1) }}- name: {{ envName}}
{{ strRepeat(" ", indent + 1) }}  {{valueKeyName}}: {{ (valuePrefix ~ envValue) | replace({"\n": " "}) | yaml_encode(inline = 0) | raw }}

{% endfor %}
{% endmacro %}

{% macro command(command) %}{% if command is iterable %}{{ command|yaml_encode(inline = 0)|raw }}{% else %}["{{ command|join("\",\"")|replace({"\n": " ", "\"": "\\\""})|raw }}"]{% endif %}{% endmacro %}